[{"date": "2025-03-18", "topic": "Python List Comprehensions", "description": "List comprehensions offer a more concise and readable way to create lists in Python. They can replace traditional `for` loop iterations for list construction, making the code cleaner and often faster.", "quiz": [{"text": "Which of the following list comprehensions will create a list of squares from 1 to 5?", "answers": [{"text": "[x*x for x in range(1, 6)]", "is_correct": true}, {"text": "[x**2 for x in range(6, 1)]", "is_correct": false}, {"text": "[x^2 for x in range(1, 6)]", "is_correct": false}, {"text": "[x^2 for x in range(5)]", "is_correct": false}]}, {"text": "What is the output of the list comprehension [x for x in range(10) if x % 2 == 0]?", "answers": [{"text": "A list of even numbers from 0 to 9.", "is_correct": true}, {"text": "A list of odd numbers from 0 to 9.", "is_correct": false}, {"text": "A list of all numbers from 0 to 9.", "is_correct": false}, {"text": "A list of numbers from 0 to 9 divisible by 3.", "is_correct": false}]}, {"text": "How do you access the letters A, T, and C from the word \"computation\" using list comprehension?", "answers": [{"text": "[letter for letter in 'computation' if letter in 'ATC']", "is_correct": true}, {"text": "[letter for letter in 'computation' if letter not in 'ATC']", "is_correct": false}, {"text": "['A', 'T', 'C']", "is_correct": false}, {"text": "[letter for letter in list('computation') if letter in 'ATC']", "is_correct": false}]}], "resources": [{"title": "Python List Comprehensions", "link": "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"}, {"title": "List Comprehensions in Python \u2013 Real Python", "link": "https://realpython.com/list-comprehension-python/"}, {"title": "Understanding Python List Comprehensions By Examples", "link": "https://towardsdatascience.com/understanding-list-comprehensions-in-python-7cae5d308443"}]}]